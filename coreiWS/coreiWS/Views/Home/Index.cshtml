@model GetListOfAPIs

@{
    ViewData["Title"] = "Index";
}

    <div class="text-center">
        <h1 class="display-8">Core-i Solutions</h1>
        <p> Core-i RST IBMi Server Consumable Sample SQLRPGLE API's</p>
        <p>
            This list of sample API's is pulled directly from the IBMi Core-iRST API library.
            This POC application shows you just how easy it is to consume API's written that live
            directly on the IBMi written in native IBMi code (RPG, COBOL, SQLRPGLE, etc.)  IBMi side
            API programs do not interface with any HTTP or cross platform lingo.  Traditional IBMi
            RPG developers can easily create these API's and Core-i RST and you do the rest of the work by simply
            consuming a familiar REST/Webservice from an HTTP endpoint.
        </p>
        <br />
        <div style="color:white;">
            The only required pieces of info a remote system needs to consume a Corei-RST API on IBMi is:
            <br />
            - URI endpoint (ie. https://yourIBMi.com/rest/rst00001r/)
            <br />
            - IBMi userProfile/Password (or certificate)
            <br />
            - http Request (ie. json string, or REST verb/noun: getCustomerBankAccountInfo/203)
        </divstyle="color:red;>
        <br />
        <br />

        <div class="col-3">
            <a button class="button btn-info form-control text-white" typeof="button" onclick="location.href='@Url.Action("coreiOverview")'">Display Core-i RST Overview</button></a>
            <p>
                <br />
            </p>
        </div>


        @if (Model.success == 1)
        {

            <table class="table">
                <tr class="table-danger">
                    <th>API Library</th>
                    <th>API Command</th>
                    <th>IBM i Program</th>
                    <th>Request Example</th>
                    <th>Action</th>
                </tr>

                @foreach (var item in Model.list)

                {
                    <tr class="table-info">
                        <td>@item.apiLibrary</td>
                        <td>@item.apiCommand</td>
                        <td>@item.ibmiPgm</td>
                        <td>
                            <dd>

                                @if (@item.firstChar == "{")
                                {
                                    <pre style="color:blue;">@Newtonsoft.Json.Linq.JToken.Parse(@item.requestExample).ToString()</pre>
                                }
                                else
                                {
                                    <pre style="color:blue;">@item.requestExample</pre>
                                }
                            </dd>
                        </td>


                        <td>
                            <!-- url.action does not have access to browser side variables (only server side)-->
                            <a button class="button btn-info form-control text-white" typeof="button" onclick="location.href='@Url.Action("modifyAPIRequest", "", new { displayOnly = true,  apiLibrary = item.apiLibrary, apiCommand = item.apiCommand, requestExample = item.requestExample })'">Modify Request Example</a>
                            &nbsp;
                            <a button class="button btn-info form-control text-white" typeof="button" onclick="location.href='@Url.Action(item.apiCommand, "", new { jsonRequest = item.requestExample })'">Consume IBMi Core-iRST API</a>
                        </td>
                    </tr>
                }

            </table>
        }
        else
        {

            <dl style="color:red;">

                <dt class="col-sm-2">
                    @Html.DisplayNameFor(model => model.resultMessage)
                </dt>
                <dd class="col-sm-10">
                    @Html.DisplayFor(model => model.resultMessage)
                </dd>


            </dl>

        }


    </div>
